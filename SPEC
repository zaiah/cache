i guess this a core tool?
--initialize (set a folder for managing stuff)
--home 		 (output CHAIN_DIR environment variable)

--build 		 (build a manifest file for a particular document)
--dirs		 (makes dirs)
	css
	js
	html/static
	lua
--files		 (makes files)
	css/<FILE>.css
	js/<FILE>.js
	html/<FILE>.html
	html/static/<FILE>.html
--no-remote	 (use no remotes)
--vc-type	 (git, mercurial, etc)
--mkdirs		 (make directories)
--mkfiles    (...)
--convert	 (convert between SQLite and files or other ) 
--log			 (uses git to get changelog of files)

*Chain really needs its own special file
.CHAIN

REMOTE_URL_ROOT=
REMOTE_GLOBAL_KEY=
...

*All of the manifests go in the folder name.
--folder <n>	 (for scripts that need access to the folder)
--exists <n>	 (is <name> a package?)
--required <x>  (everything in <x> is required)
--create <x>    (track x here)
--remove <x>    (track x here)
--update <x>    (track x here)
--needs            (set a dependency)
--no-longer-needs  (unset a dependency)
--load-needs

*All of the following are quantifiers
--version
--uuid
--description
--summary
--title
--namespace <name>
--filename <name>
--http-url <url>
--git-url <url>
--produced-on
--authors
--signature (pgp or something else)
--key (ssh key or something else)
--fingerprint (ssh key or something else)
--extra "VAR=value"

--install
--uninstall

Will generate as much possible information about a file as possible...


sw can handle actually creating directories and whatnot (pkg)

NEEDS:
git
init (really only good for testing, but we'll see)
random (for random numbers)
tmpfile (for temporary files)
file relativity thing (for absolute vs relative paths)
*selfedit (for when data should really not be kept in another file)

chain checks its home directory (CHAIN_DIR) for matching names or uuids.
Names will not conflict (unless told to)
Remotes are managed
